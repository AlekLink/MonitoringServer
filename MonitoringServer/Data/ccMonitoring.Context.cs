//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MonitoringServer.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class ccMonitoringEntities : DbContext
    {
        public ccMonitoringEntities()
            : base("name=ccMonitoringEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual int sp_InsertLineHistoryStatus(string ivrName, Nullable<int> lineIdle, Nullable<int> lineIvr, Nullable<int> lineWaiting, Nullable<int> lineAgent, Nullable<int> trCount, Nullable<int> wqCount)
        {
            var ivrNameParameter = ivrName != null ?
                new ObjectParameter("ivrName", ivrName) :
                new ObjectParameter("ivrName", typeof(string));
    
            var lineIdleParameter = lineIdle.HasValue ?
                new ObjectParameter("lineIdle", lineIdle) :
                new ObjectParameter("lineIdle", typeof(int));
    
            var lineIvrParameter = lineIvr.HasValue ?
                new ObjectParameter("lineIvr", lineIvr) :
                new ObjectParameter("lineIvr", typeof(int));
    
            var lineWaitingParameter = lineWaiting.HasValue ?
                new ObjectParameter("lineWaiting", lineWaiting) :
                new ObjectParameter("lineWaiting", typeof(int));
    
            var lineAgentParameter = lineAgent.HasValue ?
                new ObjectParameter("lineAgent", lineAgent) :
                new ObjectParameter("lineAgent", typeof(int));
    
            var trCountParameter = trCount.HasValue ?
                new ObjectParameter("trCount", trCount) :
                new ObjectParameter("trCount", typeof(int));
    
            var wqCountParameter = wqCount.HasValue ?
                new ObjectParameter("wqCount", wqCount) :
                new ObjectParameter("wqCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertLineHistoryStatus", ivrNameParameter, lineIdleParameter, lineIvrParameter, lineWaitingParameter, lineAgentParameter, trCountParameter, wqCountParameter);
        }
    
        public virtual ObjectResult<sp_SelectLineHistoryStatus_Result> sp_SelectLineHistoryStatus(string ivrName)
        {
            var ivrNameParameter = ivrName != null ?
                new ObjectParameter("ivrName", ivrName) :
                new ObjectParameter("ivrName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SelectLineHistoryStatus_Result>("sp_SelectLineHistoryStatus", ivrNameParameter);
        }
    
        public virtual int sp_UpdateLineHistoryStatus(string ivrName, Nullable<int> lineIdle, Nullable<int> lineIvr, Nullable<int> lineWaiting, Nullable<int> lineAgent, Nullable<int> trCount, Nullable<int> wqCount)
        {
            var ivrNameParameter = ivrName != null ?
                new ObjectParameter("ivrName", ivrName) :
                new ObjectParameter("ivrName", typeof(string));
    
            var lineIdleParameter = lineIdle.HasValue ?
                new ObjectParameter("lineIdle", lineIdle) :
                new ObjectParameter("lineIdle", typeof(int));
    
            var lineIvrParameter = lineIvr.HasValue ?
                new ObjectParameter("lineIvr", lineIvr) :
                new ObjectParameter("lineIvr", typeof(int));
    
            var lineWaitingParameter = lineWaiting.HasValue ?
                new ObjectParameter("lineWaiting", lineWaiting) :
                new ObjectParameter("lineWaiting", typeof(int));
    
            var lineAgentParameter = lineAgent.HasValue ?
                new ObjectParameter("lineAgent", lineAgent) :
                new ObjectParameter("lineAgent", typeof(int));
    
            var trCountParameter = trCount.HasValue ?
                new ObjectParameter("trCount", trCount) :
                new ObjectParameter("trCount", typeof(int));
    
            var wqCountParameter = wqCount.HasValue ?
                new ObjectParameter("wqCount", wqCount) :
                new ObjectParameter("wqCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateLineHistoryStatus", ivrNameParameter, lineIdleParameter, lineIvrParameter, lineWaitingParameter, lineAgentParameter, trCountParameter, wqCountParameter);
        }
    }
}
